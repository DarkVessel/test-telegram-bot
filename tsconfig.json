// Файл "tsconfig.json":
// - устанавливает корневой каталог проекта TypeScript;
// - выполняет настройку параметров компиляции;
// - устанавливает файлы проекта.
// Присутствие файла "tsconfig.json" в папке указывает TypeScript, что это корневая папка проекта.
// Внутри "tsconfig.json" указываются настройки компилятора TypeScript и корневые файлы проекта.
// Программа компилятора "tsc" ищет файл "tsconfig.json" сначала в папке, где она расположена, затем поднимается выше и ищет в родительских папках согласно их вложенности друг в друга.
// Команда "tsc --project C:\path\to\my\project\folder" берет файл "tsconfig.json" из папки, расположенной по данному пути.
// Файл "tsconfig.json" может быть полностью пустым, тогда компилятор скомпилирует все файлы с настройками заданными по умолчанию.
// Опции компилятора, перечисленные в командной строке перезаписывают собой опции, заданные в файле "tsconfig.json".
{
    "compileOnSave": false, // При значении true указывает используемой редактору кода производить компиляцию при каждом сохранении файлов TypeScript. Поддерживается не всеми редакторами кода.
    "compilerOptions": {
      // Настраивает параметры компиляции. Параметры называются также, как и в командной строке.
  
      // Основные настройки.
      // Настройки путей для создания выходных файлов.
      "outDir": "./build", // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована.
      // Настройки для поиска @types
      "module": "commonjs",
      "allowJs": false, // Разрешать компилировать файлы с JavaScript-кодом?
      "alwaysStrict": true, // Компилировать ли каждый файл в строгом режиме и создавать ли 'use strict' для каждого выходного файла? Требуется TypeScript версии 2.1 или новее.
      "checkJs": false, // Сообщить об ошибках в .js-файлах? Используйте совместно с "allowJs".
      "downlevelIteration": true, // Обеспечьте полную поддержку итераций для for - in, ..., деструктуризации при настройке на ES5 или ES3?
      "importHelpers": false, // Имортировать созданные хелперы (__extends, __rest и так далее) из "tslib".
      "noEmitOnError": true, // Не создавать итоговый файл, если во время компиляции произошла ошибка.
      "noEmitHelpers": false, // Не помещать в код итогового файла функции хелперы.
      "noUnusedLocals": false, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
      "noUnusedParameters": false, // Показывать ошибку, если где-то найдены неиспользуемые параметры.
      "noImplicitUseStrict": false, // Не записывать 'use strict' в итоговый выходной файл?
      "pretty": true, // Окрашивать в терминале сообщения об ошибках.
      "removeComments": false, // Удалить все комментарии из итогового файла.
      "sourceMap": true, // Создавать ли соответствующие source map файлы ".map"?
      "strict": false, // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
      "strictNullChecks": true, // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"?
      "target": "ES2021", // Тип кода создаваемого итогового файла.
      "watch": true, // Запустить компилятор в режиме отслеживания изменений во входных файлах и их повторной компиляции?

      // Дополнительные настройки.
      "allowSyntheticDefaultImports": true, // Разрешить импортировать модули не имеющие внутри себя "import default"?
      "allowUnreachableCode": true, // Сообщить об ошибке в случае обнаружения кода, который никогда не будет выполнен?
      "allowUnusedLabels": false, // Не создавать сообщений об ошибках, если в коде найдены неиспользуемые метки label?
      "charset": "utf8", // Кодировка входных файлов.
      "declaration": true, // Создавать ли соответствующие файлы ".d.ts"?
      "declarationDir": "typings/", // Путь до папки, в которую будут записаны созданные соответствующие файлы ".d.ts".
      "diagnostics": false, // Показывать ли диагностическую информацию?
      "disableSizeLimit": true, // Отключить ограничение размера в проекте JavaScript.
      "emitBOM": false, // Записывать ли UTF-8 Byte Order Mark (BOM) в начало итогового файла?
      "emitDecoratorMetadata": false, // Создавать метаданные для объявлений декораторов в исходном коде?
      "esModuleInterop": false, // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов.
      "experimentalDecorators": false, // Включить экспериментальную поддержку декораторов EcmaScript?
      "forceConsistentCasingInFileNames": true, // Запретить несогласованные ссылки на один и тот же файл?
      "inlineSources": false, // Помещать ли source в итоговый файл рядом с source map?
      "inlineSourceMap": false, // Помещать ли source map в итоговый файл, вместо того чтобы иметь отдельный файл с source map?
      "isolatedModules": false, // Обрабатывать каждый файл, как отдельный изолированный модуль.
      "listFiles": false, // Печатать ли имена файлов при компиляции?
      "listEmittedFiles": true, // Печатать список всех выходных файлов при компиляции. Требуется TypeScript версии 2.0 или новее.
      "maxNodeModuleJsDepth": 0, // Максимальная глубина поиска зависимостей внутри node_modules и загрузки файлов JavaScript. Применяется только вместе с заданной опцией "allowJs".
      "moduleResolution": "node", // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже.
      "newLine": "CRLF", // Определяет тип завершения строк в итоговом файле.
      "noEmit": false, // Не создавать итоговый файл.
      "noFallthroughCasesInSwitch": false, // Сообщить об ошибке в случае обнаружения проваливания в конструкции switch-case?
      "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any".
      "noImplicitThis": true, // Показывать ошибку на "this", если где-то задан тип "any".
      "noImplicitReturns": false, // Сообщить об ошибке, когда не все пути кода в функции возвращают значение?
      "noLib": false, // Не использовать стандартный библиотечный файл по умолчанию (lib.d.ts).
      "noResolve": false, // Не добавлять "/// <reference path="..." />" в список скомпилированных файлов.
      "noStrictGenericChecks": false, // Отключить строгую проверку типов джинериков в типах функций?
      "plugins": [], // Список плагинов для сервера языка TypeScript для загрузки. Требуется TypeScript версии 2.3 или новее.
      "preserveConstEnums": false, // Не удалять объявления const enum из итогового файла.
      "preserveSymlinks": false, // Не заменять символические ссылки на их реальный путь, обрабатывать символический файл как реальный.
      "skipLibCheck": false, // Не проверять типы, заданные во всех файлах описания типов (*.d.ts)?
      "skipDefaultLibCheck": false, // Пропустить проверку типов из стандартной библиотеки по умолчанию?
      "suppressExcessPropertyErrors": false, // Подавлять избыточные проверки свойств для объектных литералов?
      "suppressImplicitAnyIndexErrors": false, // Подавлять "noImplicitAny" ошибки для индексирования объектов, не имеющих индексных подписей.
      "stripInternal": false, // Не создавать объявления для кода, который имеет аннотацию JSDoc /** @internal */.
      "strictFunctionTypes": false, // Отключить проверку бивариантных параметров для типов функций.
      "strictPropertyInitialization": false, // Убедитесь, что свойства класса, имеющие значения undefined, получают новые значения внутри конструктора.
      "traceResolution": false // Выводить в логи сообщения о нахождении путей до модулей.
    },
    "exclude": [
      // Секция "exclude" позволяет исключить при компиляции определенные файлы, которые находятся в заданных папках секции "include" или в папках всего проекта, если секция "include" не задана.
      // Компилятор не будет учитывать перечисленные в секции "exclude" файлы TypeScript, которые находятся в папках из секции "include".
      // Однако файлы, заданные в секции "files" будут обязательно скомпилированы.
      // Если секция "exclude" не указана, то по умолчанию будут исключаться из компиляции все файлы из папок:
      // - node_modules,
      // - bower_components,
      // - jspm_packages,
      // - файлы из папки, указанной в опции компилятора "outDir".
      "node_modules",
      "typings"
    ],
    "include": ["src/"]
  }
